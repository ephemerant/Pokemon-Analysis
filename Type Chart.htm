<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="main.css" />
</head>

<body>
  <div id="app" style="display: none">
    <h3>Single Types</h3>

    <table class="type-table">
      <thead>
        <tr>
          <td>
            DEFENSE →
            <br>
            ATTACK ↴
          </td>
          <td v-for="defenseType in types">
            <span class="type" :style="{ background: typeColors[defenseType] }">
              {{ defenseType | shortName }}
            </span>
          </td>
        </tr>
      </thead>
      <tbody>
        <tr v-for="attackType in types">
          <td>
            <span class="type offensive" :style="{ background: typeColors[attackType] }">
              {{ attackType }}
            </span>
          </td>
          <template v-for="defenseType in types">
            <td v-if="weaknesses[attackType][defenseType] !== undefined" class="damage"
              :style="{ background: damageColors[weaknesses[attackType][defenseType]], fontSize: weaknesses[attackType][defenseType] > 0 && weaknesses[attackType][defenseType] < 1 ? '1.25rem' : null }">
              {{ weaknesses[attackType][defenseType] | asFraction }}
            </td>
            <td v-else></td>
          </template>
        </tr>
      </tbody>
    </table>

    <h3>Type Combinations</h3>

    <table class="type-table">
      <thead>
        <tr>
          <td>
            DEFENSE →
            <br>
            ATTACK ↴
          </td>
          <td v-for="defenseType in types">
            <span class="type" :style="{ background: typeColors[defenseType] }">
              {{ defenseType | shortName }}
            </span>
          </td>
          <td style="padding: 4px;">
            SCORE
          </td>
        </tr>
      </thead>
      <tbody>
        <tr v-for="entry in typeScores">
          <td>
            <div style="display: flex; align-items: center;">
              <template v-if="entry.types.length > 1">
                <span class="type offensive">
                  <span v-for="type in entry.types" class="dual" :style="{ background: typeColors[type] }">
                    {{ type }}
                  </span>
                </span>
              </template>
              <template v-else>
                <span v-for="type in entry.types" class="type" :style="{ background: typeColors[type] }">
                  {{ type }}
                </span>
              </template>
              <span v-if="entry.ability" class="ability">
                <span>
                  {{ entry.ability | abilityName }}
                </span>
              </span>
            </div>
          </td>
          <template v-for="attackType in types">
            <td v-if="entry.typeMultipliers[attackType] !== 1" class="damage"
              :style="{ background: damageColors[entry.typeMultipliers[attackType]], fontSize: entry.typeMultipliers[attackType] > 0 && entry.typeMultipliers[attackType] < 1 ? '1.25rem' : null }">
              {{ entry.typeMultipliers[attackType] | asFraction }}
            </td>
            <td v-else></td>
          </template>
          <td style="padding: 4px; text-align: center;">
            {{ entry.score }}
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <script src="lib/vue.js"></script>

  <script type="module">
    import { TYPES, WEAKNESSES, TYPE_SCORES, TYPE_COLORS, DAMAGE_COLORS } from './shared.js';

    const app = new Vue({
      el: "#app",
      created() {
        document.getElementById("app").style.display = null;
      },
      computed: {
        types() {
          return TYPES;
        },
        weaknesses() {
          return WEAKNESSES;
        },
        typeScores() {
          return TYPE_SCORES;
        },
        typeColors() {
          return TYPE_COLORS;
        },
        damageColors() {
          return DAMAGE_COLORS;
        },
      },
      filters: {
        shortName(name) {
          return name.slice(0, 3);
        },
        abilityName(ability) {
          return ability.split('-').map(x => x[0].toUpperCase() + x.slice(1)).join(' ').replace('Well Baked', 'Well-Baked');
        },
        asFraction(value) {
          if (value == 0.5) return "½";
          else if (value == 0.25) return "¼";

          return value;
        },
      },
    });
  </script>
</body>